openapi: 3.0.3
info:
  title: Agent Beats Backend API
  version: 0.1.1
  description: |
    Single-threaded synchronous backend in charge of agent registration, match
    scheduling and result retrieval.  
    - **Public API**: called by the web front-end / ops console  
    - **MCP API**: callbacks from the green-team referee or agents via A2A / MCP
servers:
  - url: http://nuggets.puppy9.com:9000
tags:
  - name: Agents
    description: Agent management
  - name: Battles
    description: Match creation, scheduling and querying
  - name: MCP
    description: Callbacks from the green-team referee / agents
components:
  schemas:
    AgentRegisterInfo:
      type: object
      required:
        - name
        - endpoint
        - launcher
      properties:
        name:
          type: string
          description: Agent display name
        endpoint:
          type: string
          format: uri
          description: Public A2A URL of the agent
        launcher:
          type: string
          format: uri
          description: launcher service URL for this agent
        meta:
          type: object
          description: Arbitrary extra registration info
    AgentCard:
      type: object
      description: Capability card returned by the agent via A2A (fields are agent-defined)
      additionalProperties: true
    AgentInfo:
      type: object
      description: Persisted, complete record of an agent
      properties:
        id:
          type: string
          format: uuid
        registerInfo:
          $ref: "#/components/schemas/AgentRegisterInfo"
        agentCard:
          $ref: "#/components/schemas/AgentCard"
        status:
          type: string
          enum:
            - unlocked
            - locked
          default: unlocked
        ready:
          type: boolean
          description: Whether the agent is ready after reset
          default: false
        createdAt:
          type: string
          format: date-time
    BattleRegisterRequest:
      type: object
      required:
        - greenAgentId
        - opponents
      properties:
        greenAgentId:
          type: string
          format: uuid
        opponents:
          type: array
          items:
            type: string
            format: uuid
        config:
          type: object
          description: Match parameters (rounds / time limits / etc.)
    BattleInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        greenAgentId:
          type: string
          format: uuid
        opponents:
          type: array
          items:
            type: string
            format: uuid
        config:
          type: object
        state:
          type: string
          enum:
            - pending
            - queued
            - running
            - finished
            - error
          default: pending
        createdAt:
          type: string
          format: date-time
        result:
          $ref: "#/components/schemas/BattleResult"
        logs:
          type: array
          items:
            $ref: "#/components/schemas/BattleLog"
          description: All log entries for this battle
    BattleResult:
      type: object
      required:
        - eventType
      properties:
        eventType:
          type: string
          enum: [result]
          description: Discriminator field to identify this as a battle result
        winner:
          type: string
          description: Agent ID or 'draw'
        score:
          type: object
          description: Scoring details provided by the green team
        detail:
          type: object
          description: Any extra referee information
        reportedAt:
          type: string
          format: date-time
    BattleLog:
      type: object
      required:
        - eventType
        - message
      properties:
        eventType:
          type: string
          enum: [log]
          description: Discriminator field to identify this as a battle log
        timestamp:
          type: string
          format: date-time
        message:
          type: string
          description: Log message or event description
        detail:
          type: object
          description: Additional log details
        source:
          type: string
          description: Source of the log (e.g., 'referee', 'agent', 'system')
    BattleEvent:
      oneOf:
        - $ref: "#/components/schemas/BattleResult"
        - $ref: "#/components/schemas/BattleLog"
      discriminator:
        propertyName: eventType
        mapping:
          result: "#/components/schemas/BattleResult"
          log: "#/components/schemas/BattleLog"
paths:
  /agents:
    post:
      summary: Register an agent and its launcher
      tags:
        - Agents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgentRegisterInfo"
      responses:
        "201":
          description: >-
            Received register info, fetched agent card and created agent on
            server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentInfo"
    get:
      summary: List all agents
      tags:
        - Agents
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AgentInfo"
  /agents/{agentId}:
    parameters:
      - in: path
        name: agentId
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Retrieve a single agent
      tags:
        - Agents
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentInfo"
    put:
      summary: Update agent status or info
      tags:
        - Agents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ready:
                  type: boolean
                  description: whether the agent is ready after reset
      responses:
        "204":
          description: Agent status updated
  /battles:
    post:
      summary: Create a battle record
      tags:
        - Battles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BattleRegisterRequest"
      responses:
        "201":
          description: Recorded in database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BattleInfo"
    get:
      summary: List all battles, and show how many are currently in the queue.
      tags:
        - Battles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BattleInfo"
  /battles/{battleId}:
    parameters:
      - in: path
        name: battleId
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Retrieve battle details
      tags:
        - Battles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BattleInfo"
    post:
      summary: Report battle result or add battle log entry
      description: |
        This endpoint accepts two types of data:
        - BattleResult: Final battle outcome (winner, score, etc.) - replaces any existing result
        - BattleLog: Log entry to be appended to the battle's log history
      tags:
        - Battles
      parameters:
        - in: path
          name: battleId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BattleEvent"
            examples:
              battleResult:
                summary: Report final battle result
                value:
                  eventType: result
                  winner: "agent-123"
                  score: { "red": 100, "blue": 85 }
                  detail: { "rounds": 3, "duration": "5m30s" }
                  reportedAt: "2025-07-02T10:30:00Z"
              battleLog:
                summary: Add log entry
                value:
                  eventType: log
                  timestamp: "2025-07-02T10:25:00Z"
                  message: "Round 2 completed"
                  detail: { "round": 2, "action": "move", "result": "success" }
                  source: "referee"
      responses:
        "204":
          description: |
            Data saved to database:
            - If BattleResult: result field updated
            - If BattleLog: entry appended to logs array

  /mcp/agents/{agentId}/card:
    post:
      summary: Agent-initiated or backend-initiated upload of AgentCard
      tags:
        - MCP
      parameters:
        - in: path
          name: agentId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AgentCard"
      responses:
        "204":
          description: Accepted
