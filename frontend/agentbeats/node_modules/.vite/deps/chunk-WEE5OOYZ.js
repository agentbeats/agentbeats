import {
  add_locations,
  attribute_effect,
  check_target,
  each,
  element,
  hmr,
  index,
  init,
  legacy_api,
  legacy_rest_props,
  prop,
  slot,
  validate_dynamic_element_tag
} from "./chunk-2ZD4HJ7B.js";
import {
  append,
  comment,
  from_svg
} from "./chunk-DIHRETHW.js";
import {
  FILENAME,
  HMR,
  add_svelte_meta,
  child,
  deep_read_state,
  first_child,
  get,
  pop,
  push,
  reset,
  set,
  sibling,
  strict_equals,
  to_array,
  untrack,
  user_derived
} from "./chunk-5EM22ILH.js";

// node_modules/@tabler/icons-svelte/dist/defaultAttributes.js
var defaultAttributes = {
  outline: {
    xmlns: "http://www.w3.org/2000/svg",
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    "stroke-width": 2,
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  },
  filled: {
    xmlns: "http://www.w3.org/2000/svg",
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "currentColor",
    stroke: "none"
  }
};
var defaultAttributes_default = defaultAttributes;

// node_modules/@tabler/icons-svelte/dist/Icon.svelte
Icon[FILENAME] = "node_modules/@tabler/icons-svelte/dist/Icon.svelte";
var root = add_locations(from_svg(`<svg><!><!></svg>`), Icon[FILENAME], [[10, 0]]);
function Icon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["type", "name", "color", "size", "stroke", "iconNode"]);
  push($$props, false, Icon);
  let type = prop($$props, "type", 8);
  let name = prop($$props, "name", 8);
  let color = prop($$props, "color", 8, "currentColor");
  let size = prop($$props, "size", 8, 24);
  let stroke = prop($$props, "stroke", 8, 2);
  let iconNode = prop($$props, "iconNode", 8);
  init();
  var svg = root();
  attribute_effect(svg, () => ({
    ...defaultAttributes_default[type()],
    ...$$restProps,
    width: size(),
    height: size(),
    class: (deep_read_state(name()), deep_read_state($$sanitized_props), untrack(() => `tabler-icon tabler-icon-${name()} ${$$sanitized_props.class ?? ""}`)),
    ...strict_equals(type(), "filled") ? { fill: color() } : { "stroke-width": stroke(), stroke: color() }
  }));
  var node = child(svg);
  add_svelte_meta(
    () => each(node, 1, iconNode, index, ($$anchor2, $$item) => {
      var $$array = user_derived(() => to_array(get($$item), 2));
      let tag = () => get($$array)[0];
      tag();
      let attrs = () => get($$array)[1];
      attrs();
      var fragment = comment();
      var node_1 = first_child(fragment);
      validate_dynamic_element_tag(tag);
      element(
        node_1,
        tag,
        true,
        ($$element, $$anchor3) => {
          attribute_effect($$element, () => ({ ...attrs() }));
        },
        void 0,
        [26, 4]
      );
      append($$anchor2, fragment);
    }),
    "each",
    Icon,
    25,
    2
  );
  var node_2 = sibling(node);
  slot(node_2, $$props, "default", {}, null);
  reset(svg);
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Icon = hmr(Icon, () => Icon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Icon[HMR].source;
    set(Icon[HMR].source, module.default[HMR].original);
  });
}
var Icon_default = Icon;

export {
  Icon_default
};
//# sourceMappingURL=chunk-WEE5OOYZ.js.map
