import { type Data } from '../store/index.js';
import type { UniqueIdentifier } from '../types/index.js';
import { type ResolvableObject } from '@dnd-kit-svelte/utilities';
interface ResizeObserverConfig {
    /** Whether the ResizeObserver should be disabled entirely */
    disabled?: boolean;
    /** Resize events may affect the layout and position of other droppable containers.
     * Specify an array of `UniqueIdentifier` of droppable containers that should also be re-measured
     * when this droppable container resizes. Specifying an empty array re-measures all droppable containers.
     */
    updateMeasurementsFor?: UniqueIdentifier[];
    /** Represents the debounce timeout between when resize events are observed and when elements are re-measured */
    timeout?: number;
}
export type UseDroppableArguments = ResolvableObject<{
    id: UniqueIdentifier;
    disabled?: boolean;
    data?: Data;
    resizeObserverConfig?: ResizeObserverConfig;
}>;
export declare function useDroppable(args: UseDroppableArguments): {
    active: import("svelte-toolbelt").ReadableBox<import("../store/index.js").Active | null>;
    rect: import("svelte-toolbelt").ReadableBox<null>;
    isOver: import("svelte-toolbelt").ReadableBox<boolean>;
    node: import("svelte-toolbelt").WritableBox<HTMLElement | null>;
    over: import("svelte-toolbelt").ReadableBox<import("../store/index.js").Over | null>;
    setNodeRef: (element: HTMLElement | null) => void;
};
export {};
