import type { ClientRect } from '../../types/rect.js';
import type { DroppableContainer, RectMap } from '../../store/types.js';
import type { UniqueIdentifier } from '../../types/other.js';
export declare enum MeasuringStrategy {
    Always = 0,
    BeforeDragging = 1,
    WhileDragging = 2
}
export declare enum MeasuringFrequency {
    Optimized = "optimized"
}
type MeasuringFunction = (element: HTMLElement) => ClientRect;
export interface DroppableMeasuring {
    measure: MeasuringFunction;
    strategy: MeasuringStrategy;
    frequency: MeasuringFrequency | number;
}
type DroppableMeasuringOptions = () => {
    containers: DroppableContainer[];
    dragging: boolean;
    dependencies: () => any[];
    config: DroppableMeasuring;
};
export declare function useDroppableMeasuring(options: DroppableMeasuringOptions): {
    droppableRects: import("svelte-toolbelt").ReadableBox<RectMap>;
    measureDroppableContainers: (ids?: UniqueIdentifier[]) => void;
    measuringScheduled: import("svelte-toolbelt").ReadableBox<boolean>;
};
export {};
