import type { SensorDescriptor } from '../../sensors/types.js';
import { type Snippet } from 'svelte';
import type { DragAbortEvent, DragPendingEvent, DragStartEvent, DragMoveEvent, DragOverEvent, DragEndEvent, DragCancelEvent } from '../../types/index.js';
import { type CollisionDetection } from '../../utilities/index.js';
import type { MeasuringConfiguration } from './types.js';
import { type Modifiers } from '../../modifiers/index.js';
import { type Transform } from '@dnd-kit-svelte/utilities';
import type { AutoScrollOptions } from '../../hooks/index.js';
import type { Announcements, ScreenReaderInstructions } from '../accessibility/types.js';
export interface Props {
    id?: string;
    accessibility?: {
        announcements?: Announcements;
        container?: HTMLElement;
        restoreFocus?: boolean;
        screenReaderInstructions?: ScreenReaderInstructions;
    };
    autoScroll?: boolean | AutoScrollOptions;
    cancelDrop?: CancelDrop;
    children?: Snippet;
    collisionDetection?: CollisionDetection;
    measuring?: MeasuringConfiguration;
    modifiers?: Modifiers;
    sensors?: SensorDescriptor<any>[];
    onDragAbort?(event: DragAbortEvent): void;
    onDragPending?(event: DragPendingEvent): void;
    onDragStart?(event: DragStartEvent): void;
    onDragMove?(event: DragMoveEvent): void;
    onDragOver?(event: DragOverEvent): void;
    onDragEnd?(event: DragEndEvent): void;
    onDragCancel?(event: DragCancelEvent): void;
}
export interface CancelDropArguments extends DragEndEvent {
}
export type CancelDrop = (args: CancelDropArguments) => boolean | Promise<boolean>;
export declare const ActiveDraggableContextKey: unique symbol;
export declare function getActiveDraggableContext(): Transform;
declare const DndContext: import("svelte").Component<Props, {}, "">;
type DndContext = ReturnType<typeof DndContext>;
export default DndContext;
