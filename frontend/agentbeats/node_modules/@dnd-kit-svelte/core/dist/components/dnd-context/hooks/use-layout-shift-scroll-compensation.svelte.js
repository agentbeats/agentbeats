import { getRectDelta, getFirstScrollableAncestor } from '../../../utilities/index.js';
export function useLayoutShiftScrollCompensation(optionsFn) {
    let initialized = false;
    const { activeNode, measure, initialRect, config = true } = $derived(optionsFn());
    const { x, y } = $derived(typeof config === 'boolean' ? { x: config, y: config } : config);
    $effect(() => {
        const disabled = !x && !y;
        if (disabled || !activeNode) {
            initialized = false;
            return;
        }
        if (initialized || !initialRect) {
            // Return early if layout shift scroll compensation was already attempted
            // or if there is no initialRect to compare to.
            return;
        }
        // Get the most up to date node ref for the active draggable
        const node = activeNode?.node;
        if (!node || node.isConnected === false) {
            // Return early if there is no attached node ref or if the node is
            // disconnected from the document.
            return;
        }
        const rect = measure(node);
        const rectDelta = getRectDelta(rect, initialRect);
        if (!x) {
            rectDelta.x = 0;
        }
        if (!y) {
            rectDelta.y = 0;
        }
        // Only perform layout shift scroll compensation once
        initialized = true;
        if (Math.abs(rectDelta.x) > 0 || Math.abs(rectDelta.y) > 0) {
            const firstScrollableAncestor = getFirstScrollableAncestor(node);
            if (firstScrollableAncestor) {
                firstScrollableAncestor.scrollBy({
                    top: rectDelta.y,
                    left: rectDelta.x,
                });
            }
        }
    });
}
