export const CSS = Object.freeze({
    Translate: {
        toString(transform) {
            if (!transform) {
                return;
            }
            const { x, y } = transform;
            return `translate3d(${x ? Math.round(x) : 0}px, ${y ? Math.round(y) : 0}px, 0)`;
        },
    },
    Scale: {
        toString(transform) {
            if (!transform) {
                return;
            }
            const { scaleX, scaleY } = transform;
            return `scaleX(${scaleX}) scaleY(${scaleY})`;
        },
    },
    Transform: {
        toString(transform) {
            if (!transform) {
                return;
            }
            return [CSS.Translate.toString(transform), CSS.Scale.toString(transform)].join(' ');
        },
    },
    Transition: {
        toString({ property, duration, easing }) {
            return `${property} ${duration}ms ${easing}`;
        },
    },
});
export function styleObjectToString(styleObj) {
    return Object.entries(styleObj)
        .filter(([, value]) => value !== undefined)
        .map(([key, value]) => {
        // Add 'px' to numbers except for unitless properties
        const unitlessProps = ['opacity', 'zIndex', 'fontWeight', 'lineHeight', 'order', 'flexGrow', 'flexShrink'];
        const formattedValue = typeof value === 'number' && !unitlessProps.includes(key) ? `${value}px` : value;
        return `${key.replace(/[A-Z]/g, (m) => `-${m.toLowerCase()}`)}:${formattedValue}`;
    })
        .join(';');
}
export function styleStringToObject(styleStr) {
    return styleStr.split(';').reduce((obj, style) => {
        const [key, value] = style.split(':');
        if (key && value) {
            obj[key] = value;
        }
        return obj;
    }, {});
}
