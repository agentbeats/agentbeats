import type { writeIndivisibleMessage } from "@ark/schema";
import type { ErrorMessage } from "@ark/util";
import type { InferredMorph } from "arktype/internal/attributes.ts";
import type { inferAstRoot } from "arktype/internal/parser/ast/infer.ts";
import type { writeConstrainedMorphMessage } from "arktype/internal/parser/ast/utils.ts";
import type { validateAst } from "arktype/internal/parser/ast/validate.ts";
export type validateDivisor<l, $, args> = inferAstRoot<l, $, args> extends infer data ? [
    data
] extends [number] ? validateAst<l, $, args> : [data] extends [InferredMorph] ? ErrorMessage<writeConstrainedMorphMessage<l>> : ErrorMessage<writeIndivisibleMessage<data>> : never;
