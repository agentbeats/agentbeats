import { isHTMLElement, useNodeRef } from '@dnd-kit-svelte/utilities';
import { useResizeObserver } from './index.js';
import { getMeasurableNode } from '../../utilities/nodes/index.js';
export function useDragOverlayMeasuring({ measureFn }) {
    const measure = $derived(measureFn());
    let rect = $state(null);
    const handleResize = (entries) => {
        for (const { target } of entries) {
            if (isHTMLElement(target)) {
                const newRect = measure(target);
                rect = rect ? { ...rect, width: newRect.width, height: newRect.height } : newRect;
                break;
            }
        }
    };
    const resizeObserver = useResizeObserver(() => ({ callback: handleResize }));
    const handleNodeChange = (element) => {
        const node = getMeasurableNode(element);
        resizeObserver?.current?.disconnect();
        if (node) {
            resizeObserver?.current?.observe(node);
        }
        rect = node ? measure(node) : null;
    };
    const [nodeRef, setRef] = useNodeRef(handleNodeChange);
    return {
        get nodeRef() {
            return nodeRef.current;
        },
        get rect() {
            return rect;
        },
        setRef,
    };
}
