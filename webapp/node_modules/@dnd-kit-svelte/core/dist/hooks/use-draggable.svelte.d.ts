import { type Data } from '../store/index.js';
import type { UniqueIdentifier } from '../types/index.js';
import { type ResolvableObject, type Transform } from '@dnd-kit-svelte/utilities';
import { type SyntheticListenerMap } from './utilities/index.js';
export type UseDraggableArguments = ResolvableObject<{
    id: UniqueIdentifier;
    data?: Data;
    disabled?: boolean;
    attributes?: {
        role?: string;
        roleDescription?: string;
        tabIndex?: number;
    };
}>;
export interface DraggableAttributes {
    role: string;
    tabIndex: number;
    'aria-disabled': boolean;
    'aria-pressed': boolean | undefined;
    'aria-roledescription': string;
    'aria-describedby': string;
}
export type DraggableSyntheticListeners = SyntheticListenerMap | undefined;
export declare function useDraggable(args: UseDraggableArguments): {
    active: import("svelte-toolbelt").ReadableBox<import("../store/index.js").Active | null>;
    activatorEvent: import("svelte-toolbelt").ReadableBox<Event | null>;
    activeNodeRect: import("svelte-toolbelt").ReadableBox<import("../types/index.js").ClientRect | null>;
    attributes: import("svelte-toolbelt").ReadableBox<DraggableAttributes>;
    isDragging: import("svelte-toolbelt").ReadableBox<boolean>;
    listeners: import("svelte-toolbelt").ReadableBox<SyntheticListenerMap | undefined>;
    node: import("svelte-toolbelt").WritableBox<HTMLElement | null>;
    over: import("svelte-toolbelt").ReadableBox<import("../store/index.js").Over | null>;
    setNodeRef: (element: HTMLElement | null) => void;
    setActivatorNodeRef: (element: HTMLElement | null) => void;
    transform: import("svelte-toolbelt").ReadableBox<Transform | null>;
};
