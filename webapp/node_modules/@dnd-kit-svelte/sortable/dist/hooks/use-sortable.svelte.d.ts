import { type UseDraggableArguments, type UseDroppableArguments } from '@dnd-kit-svelte/core';
import { type ResolvableObject } from '@dnd-kit-svelte/utilities';
import type { Disabled, SortableData, SortingStrategy } from '../types/index.js';
import type { AnimateLayoutChanges, NewIndexGetter, SortableTransition } from './types.js';
export type Arguments = Omit<UseDraggableArguments, 'disabled'> & Pick<UseDroppableArguments, 'resizeObserverConfig'> & ResolvableObject<{
    animateLayoutChanges?: AnimateLayoutChanges;
    disabled?: boolean | Disabled;
    getNewIndex?: NewIndexGetter;
    strategy?: SortingStrategy;
    transition?: SortableTransition | null;
}>;
export declare function useSortable(args: Arguments): {
    active: import("svelte-toolbelt").ReadableBox<import("@dnd-kit-svelte/core").Active | null>;
    activeIndex: import("svelte-toolbelt").ReadableBox<number>;
    attributes: import("svelte-toolbelt").ReadableBox<import("@dnd-kit-svelte/core").DraggableAttributes>;
    data: import("svelte-toolbelt").ReadableBox<SortableData & {
        [x: string]: any;
    }>;
    rect: import("svelte-toolbelt").ReadableBox<null>;
    index: import("svelte-toolbelt").ReadableBox<number>;
    newIndex: import("svelte-toolbelt").ReadableBox<number>;
    items: import("svelte-toolbelt").ReadableBox<import("@dnd-kit-svelte/core").UniqueIdentifier[]>;
    isOver: import("svelte-toolbelt").ReadableBox<boolean>;
    isSorting: import("svelte-toolbelt").ReadableBox<boolean>;
    isDragging: import("svelte-toolbelt").ReadableBox<boolean>;
    listeners: import("svelte-toolbelt").ReadableBox<import("@dnd-kit-svelte/core/dist/hooks/utilities/use-synthetic-listeners.svelte.js").SyntheticListenerMap | undefined>;
    node: import("svelte-toolbelt").WritableBox<HTMLElement | null>;
    activatorNode: import("svelte-toolbelt").WritableBox<HTMLElement>;
    overIndex: import("svelte-toolbelt").ReadableBox<number>;
    over: import("svelte-toolbelt").ReadableBox<import("@dnd-kit-svelte/core").Over | null>;
    setNodeRef: (node: HTMLElement | null) => void;
    setActivatorNodeRef: (element: HTMLElement | null) => void;
    setDroppableNodeRef: (element: HTMLElement | null) => void;
    setDraggableNodeRef: (element: HTMLElement | null) => void;
    transform: import("svelte-toolbelt").ReadableBox<import("@dnd-kit-svelte/utilities").Transform | null>;
    transition: import("svelte-toolbelt").ReadableBox<string | undefined>;
};
