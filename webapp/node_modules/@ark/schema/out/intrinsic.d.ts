export declare const intrinsic: {
    emptyStructure: import("@ark/schema").StructureNode;
    jsonPrimitive: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    jsonObject: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    jsonData: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    integer: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    lengthBoundable: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    key: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    nonNegativeIntegerString: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    string: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    number: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    bigint: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    boolean: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    symbol: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    undefined: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    object: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    null: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    Array: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    Date: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    false: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    never: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    true: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
    unknown: import("@ark/schema").BaseRoot<import("@ark/schema").InternalRootDeclaration>;
};
